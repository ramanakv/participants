
problems in Arrays 
	size is constant
	insert in between not possible
	delete an element not possible
	
collections are similar to arrays but the size keeps changing dynamically
No need to decide on size initially
size keeps expanding when new element is added / inserted
size goes down when elements are deleted
Collections   (java.util package)
All collection classes are generic

	List interface
	==============
		ordered collection
		allows duplicate elements
		implementing classes
				Vector
				ArrayList
				LinkedList
		
	Set interface
	=============
		unordered collection
		does not allow duplicates
		positioned access (using index) not allowed
		
		implementing classes
				HashSet   (positions elements based on hashCode)
				TreeSet	(positions elements in sorted order)
				LinkedHashSet (Positions elements in the ordered way)

classes that implement List interface
------------------------------------------

1. ArrayList

	ordered collection of objects
	duplicates are allowed 
	positioned access is possible  using get() method
	use for-each loop to go through the list
	
	metohds:
		size() --> gives number of elements
		add(Object) --> adds elements at the end
		add(int, object)   --> insert element at a the given position
		remove(int)  		--> delete an element
		get(int)		--> returns a element at the given posiiton 
	
		set(int,object)  --> replacing object at a given position
		
		addAll(collection) --> adds all elemnts fro other collection
	
2. Vector  is same as ArrayList	but threadsafe (all methods are synchronized)

3. LinkedList --> internally implemented as linked list. 
	
	
classes implementing Set interface:
----------------------------------------

1. HashSet
		unordered collection
		duplicates are not allowed
		element position in the set depends on hashCode()
		elements should have hashcode() and equals() methods
		
		positioned access is not possible
		insert is not possible 
		
		methods:
			add()
			remove()
			addAll(collection)
			size()
			contains()
			
2. TreeSet
		Duplicates are not allowed
		Elements are arranged in sorted order
		positioned access is not possible
		insert is not possible 	
		Mathods : same as HashSet
		
3. LinkedHashSet
		item order is maintained
		duplicates not allowed
		
Summary
========

List interface
	ArrayList class   --> order of items is same as order of adding
Set
	HashSet  class   --> order of items depends on hashCode() method 
	TreeSet  class	  -->  order of items in sorted order based on compareTo() method of the class
	
Adding objects:
List --> any object can be added
HashSet --> objects of a class with hashCode() and equals() method can be added
TreeSet --> objects of class implementing Comaparable interface can be added

==========================================================================================
Collections
		class containing static methods to manipulate collection objects
		
Examples:
		Collections.sort(list)
		Collections.reverse(list)
		Collections.min(list or set)
		Collections.max(list or set)
		Collections.swap(list, i, j)

Map interface
=============

Key Value pairs
Keys cannot have duplicate values
Key is used to search to get values

Operations:
	put(Key,value)  <-- to add one entry 
	get(Key)  <-- search for a key and get values
	remove(Key)   <-- remove entry based on key
	containsKey(Key) <-- boolean to check whetehr a key exists
	
	Implementing classes
			HashMap		 -->  uses hashCode of key for storing the element
			Hashtable 	-->  same as above. But thread safe
			TreeMap      --> arranges the content on ascending order of key
			LinkedHashMap --> linkedlist implementation 

