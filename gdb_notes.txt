GDB Commands
============
gdb executable <-- starts gdb for this executable
		the cxecutable should be created with -g option to generate symbol table
		example:  gcc -g -o addnums addnums.c

quit <-- to quit gdb

breakpoints: halt the program at that location so that we can inspect values of variables

	break linenumber   <-- set breakpoint at given linenumber
	break functionname  <-- set breakpoint at the start of the function
	break filename:linenumber <-- required while using multiple files in compilation 
			example:  break hello.c:8
	break linenumber if bool expression  <-- sets breakpoint based on the condition. Helps in long running loops
		example:  break 8 if i > 200   <-- program halts at line 8 only when i is greater than 200

other breakpoint commands:
	info breakpoints <-- display all breakpoints along with breakpoint number and line number
	delete br breakpointnumber <-- deletes breakpoint with the given number
	clear linenumber  <-- delete breakpoint of that line number
	delete breakpoints  <-- delete all breakpoints 
	disable br list <-- disable a breakpoint or list of breakoints. All breakpoints disbled if list not given
	enable br list <-- enable breakpoints again

Running the program:
	run  <-- starts the program and halts at first breakpoint
	start <-- starts the program with default breakpoint at first executable line

degugging navigation:
	next <-- goto next line
	step <-- step into a function
	finish <-- come out of the function
	continue  <-- continue the program (stop at next breakpoint if it exists)

Code list: we can see the lines of code 
	list  <-- display 10 lines of code
	list start,end   <-- list lines with start linenumber to end linenumber
			example: list 12,34

checking value of variables:
	print  variablename  <-- show variable value at that point
	display variablename  <-- display variable value automatically during navigation
	undisplay variablename  <-- stops displaying variable 
	undisplay <-- stops automatic displaying of all variables

info locals <-- display all local variables
info args <-- display all arguments of the function

watchpoints:
	watchpoint helps to monitor the changes happenning to a variable
	
	watch variablename <-- program halts whenver the variable value changes
	watch x > 30  <-- halt when value of x becomes greater than 30

	all commands to delete, enable, disable watchpoints are same as breakpoint
	
checkpoint: works as a book mark in the process of execution. saves state of the program at this point
		we can go back to the same state any time. checkpoint not related to line numbers
		it is related to program status at a particular time
		when we go back to checkpoint, whatever happened so far is reversed
		
	checkpoint  <-- sets checkpoint at this point of execution
	info checkpoints  <-- shows details of checkpoints
	restart checkpoint-id  <-- go back to the state of that particular checkpoint
	delete checkpoint checkpoint-id  <-- deletes a checkpoint

stack frames:
	frame with local variables and args created (in call stack) for every function call
	every frame has address
	every frame contains local variables and args of that function
	when function execution completed, frame is removed from call stack
	
	commands:
		where  <- gives details of all frames in the stack
		backtrace <- same as above
		frame number <-- give details of frame with the given number
		info args, info locals apply to the current frame
		navigating in the frames: 
			up <-- goes to previos frame
			down <-- goes to next frame
		
		
	
	
	
	
	
